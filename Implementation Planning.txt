# Updated Football Data Implementation Plan (Reflecting Current State & Plans)

This document outlines the implementation plan and current status of the SportMonks football data retrieval project, updated to reflect the actual code structure, workflow, and planned future features.

## Phase 1: API Endpoints & Data Requirements

The project utilizes or plans to utilize the following SportMonks API v3 endpoints:

**1. Implemented Endpoints:**
* `/v3/football/leagues?include=currentSeason`: Fetches league data along with details of the current season. (Used by `scripts/sync_leagues.py`)
* `/v3/football/teams`: Fetches team data. (Used by `scripts/sync_teams.py`)
* `/v3/football/schedules/seasons/{id}`: Fetches the full schedule (including fixture details) for a specific season. (Used by `scripts/sync_schedules.py` - *Primary source for fixture info*)
* `/v3/football/fixtures/{id}?include=periods.statistics.type`: Fetches detailed fixture statistics broken down by period. (Used by `scripts/sync_fixture_stats.py` for finished fixtures)

**2. Planned Endpoints (Not Yet Implemented):**
* `/v3/football/fixtures/{id}?include=odds`: To fetch pre-match and in-play odds. (Needed for `fixture_odds` table)
* `/v3/football/fixtures/{id}?include=events`: To fetch timeline/event data. (Needed for `fixture_timeline` table)
* *(Potentially)* `/v3/football/livescores/inplay`: For collecting real-time data if needed in the future.

**3. Endpoints Currently NOT Used:**
* `/v3/football/fixtures` (Directly fetching all fixtures)
* `/v3/football/seasons` (Directly fetching all seasons)

**4. Key Include Parameters Used/Planned:**
* `currentSeason` (with `/leagues`) - *Implemented*
* `periods.statistics.type` (with `/fixtures/{id}`) - *Implemented*
* `odds` (with `/fixtures/{id}`) - *Planned*
* `events` (with `/fixtures/{id}`) - *Planned*

## Phase 2: Implementation Steps & Current Status

The project follows a modular structure with sync scripts coordinating the fetch-process-store workflow.

### Step 1: Core Modules Setup (Completed)
* **`src/config.py`:** Configuration set up.
* **`src/api/client.py`:** `APIClient` implemented.
* **`src/api/endpoints.py`:** `EndpointHandler` implemented.
* **`src/data/storage.py`:** DB connection, table creation (for implemented tables), data storage logic, and triggers implemented.
* **`src/data/processors.py`:** Processing functions for implemented data types (leagues, seasons, teams, schedules, stats) implemented.

### Step 2: Implement Sync Scripts (Partially Completed)
* **`scripts/sync_leagues.py` (Implemented):** Fetches/processes/stores leagues and current seasons.
* **`scripts/sync_teams.py` (Implemented):** Fetches/processes/stores teams.
* **`scripts/sync_schedules.py` (Implemented):** Fetches/processes/stores detailed fixture info per season into the `schedules` table.
* **`scripts/sync_fixture_stats.py` (Implemented):** Fetches/processes/stores detailed stats for finished fixtures.
* **`scripts/sync_odds.py` (Planned):** Script needed to fetch odds data using the planned endpoint and store it in `fixture_odds`.
* **`scripts/sync_events.py` (Planned):** Script needed to fetch event/timeline data using the planned endpoint and store it in `fixture_timeline`.

### Step 3: Implement Supporting Logic (Partially Implemented)
* **Error Handling:** Basic implementation exists.
* **Logging:** Basic implementation exists (mostly `print` statements).
* **Incremental Updates:** Partially implemented for stats. Other scripts use `INSERT OR REPLACE`. Fetching efficiency can be improved.
* **Raw Data Storage:** Implemented.
* **Scheduling/Orchestration:** Not implemented.

### Step 4: Testing & Validation (Manual/Ad-hoc)
* Individual script execution and manual DB checks are possible. Formal testing is not implemented.

## Potential Next Steps / Future Enhancements

1.  **Implement Odds Sync (High Priority based on Plan):**
    * Define the `fixture_odds` table schema in `src/data/storage.py` (use the planned schema).
    * Create `process_odds_data` function in `src/data/processors.py`.
    * Create `scripts/sync_odds.py` to fetch from `/fixtures/{id}?include=odds` (decide which fixtures: upcoming, recent?) and store data.
2.  **Implement Timeline/Events Sync (High Priority based on Plan):**
    * Define the `fixture_timeline` table schema in `src/data/storage.py` (use the planned schema).
    * Create `process_timeline_data` function in `src/data/processors.py`.
    * Create `scripts/sync_events.py` to fetch from `/fixtures/{id}?include=events` and store data.
3.  **Refine Incremental Updates:** Explore API filters for more efficient fetching.
4.  **Enhance Logging:** Standardize using the `logging` library.
5.  **Add Data Validation:** Implement checks within processors (e.g., Pydantic).
6.  **Improve Error Handling:** Add more specific handling and reporting.
7.  **Automated Testing:** Implement unit and integration tests.
8.  **Orchestration:** Integrate with a scheduling tool.
