# Updated Database Planning (Reflecting Implementation & Plans)

This document outlines the SQLite database schema, including currently implemented tables and those planned for future implementation, designed to store football data retrieved from the SportMonks v3 API.

## Database Schema

The following tables are either implemented or planned:

**1. `leagues` Table (Implemented)**

* **Purpose:** Stores basic information about football leagues.
* **Populated by:** `scripts/sync_leagues.py`
* **Schema:**
    ```sql
    CREATE TABLE IF NOT EXISTS leagues (
        league_id INTEGER PRIMARY KEY,          -- From SportMonks API 'id'
        sport_id INTEGER,                       -- From SportMonks API 'sport_id'
        country_id INTEGER,                     -- From SportMonks API 'country_id'
        name TEXT NOT NULL,                     -- From SportMonks API 'name'
        active BOOLEAN DEFAULT 1,               -- From SportMonks API 'active'
        short_code TEXT,                        -- From SportMonks API 'short_code' (nullable)
        image_path TEXT,                        -- From SportMonks API 'image_path' (nullable)
        type TEXT,                              -- From SportMonks API 'type' (e.g., 'league', 'cup')
        sub_type TEXT,                          -- From SportMonks API 'sub_type' (e.g., 'domestic', 'domestic_cup')
        last_played_at TEXT,                    -- From SportMonks API 'last_played_at' (ISO format string, nullable)
        category INTEGER,                       -- From SportMonks API 'category' (nullable)
        current_season_id INTEGER,              -- From SportMonks API 'currentseason.id' (Added)
        -- Database internal tracking timestamps
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    ```

**2. `seasons` Table (Implemented)**

* **Purpose:** Stores information about specific league seasons.
* **Populated by:** `scripts/sync_leagues.py` (extracts `currentseason` data)
* **Schema:**
    ```sql
    CREATE TABLE IF NOT EXISTS seasons (
        season_id INTEGER PRIMARY KEY,          -- From SportMonks API 'id'
        league_id INTEGER NOT NULL,             -- From SportMonks API 'league_id'
        league_name TEXT,                       -- Added for context (can be derived)
        sport_id INTEGER,                       -- From SportMonks API 'sport_id'
        name TEXT NOT NULL,                     -- From SportMonks API 'name'
        is_current BOOLEAN DEFAULT 0,           -- From SportMonks API 'is_current'
        finished BOOLEAN DEFAULT 0,             -- From SportMonks API 'finished' (Added)
        pending BOOLEAN DEFAULT 0,              -- From SportMonks API 'pending' (Added)
        starting_at TEXT,                       -- From SportMonks API 'starting_at' (Added)
        ending_at TEXT,                         -- From SportMonks API 'ending_at' (Added)
        standings_recalculated_at TEXT,         -- From SportMonks API 'standings_recalculated_at' (Added)
        -- Database internal tracking timestamps
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    ```

**3. `teams` Table (Implemented)**

* **Purpose:** Stores information about football teams/clubs.
* **Populated by:** `scripts/sync_teams.py`
* **Schema:**
    ```sql
     CREATE TABLE IF NOT EXISTS teams (
        team_id INTEGER PRIMARY KEY,            -- From SportMonks API 'id'
        name TEXT NOT NULL,                     -- From SportMonks API 'name'
        short_code TEXT,                        -- From SportMonks API 'short_code' (Added)
        country_id INTEGER,                     -- From SportMonks API 'country_id'
        logo_url TEXT,                          -- From SportMonks API 'image_path'
        venue_id INTEGER,                       -- From SportMonks API 'venue_id' (Added)
        founded INTEGER,                        -- From SportMonks API 'founded' (Added)
        type TEXT,                              -- From SportMonks API 'type' (Added)
        national_team BOOLEAN DEFAULT 0,        -- From SportMonks API 'national_team' (Added)
        -- Database internal tracking timestamps
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    ```

**4. `schedules` Table (Implemented)**

* **Purpose:** Stores core details about individual fixtures (matches), including schedule context (round, season) and basic results. This table effectively replaces the originally planned `fixtures` table by incorporating essential match data obtained from the `/schedules/seasons/{id}` endpoint.
* **Populated by:** `scripts/sync_schedules.py`
* **Schema:**
    ```sql
     CREATE TABLE IF NOT EXISTS schedules (
        fixture_id INTEGER PRIMARY KEY,     -- Unique ID for the match (From fixture data)
        season_id INTEGER NOT NULL,         -- ID of the season (From round data)
        league_id INTEGER,                  -- ID of the league (From fixture data)
        round_id INTEGER,                   -- ID of the round (From round data)
        home_team_id INTEGER NOT NULL,      -- ID of the home team (From fixture participants)
        away_team_id INTEGER NOT NULL,      -- ID of the away team (From fixture participants)
        start_time TEXT NOT NULL,           -- Match start time (From fixture 'starting_at')
        status TEXT,                        -- Match status (Mapped from fixture 'state_id')
        home_score INTEGER,                 -- Final home score (From fixture scores)
        away_score INTEGER,                 -- Final away score (From fixture scores)
        result TEXT,                        -- Standardized result ('H', 'D', 'A', NULL) (Derived)
        result_info TEXT,                   -- Raw result description from API (From fixture 'result_info')
        round_finished BOOLEAN,             -- Status of the round (From round data)
        -- Database internal tracking timestamps
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        -- Optional Foreign Keys (can be added later)
        -- FOREIGN KEY (season_id) REFERENCES seasons(season_id),
        -- FOREIGN KEY (league_id) REFERENCES leagues(league_id),
        -- FOREIGN KEY (home_team_id) REFERENCES teams(team_id),
        -- FOREIGN KEY (away_team_id) REFERENCES teams(team_id)
    );
    ```

**5. `fixture_stats` Table (Implemented)**

* **Purpose:** Stores detailed match statistics for each team, per period (e.g., first half, second half). Uses a wide format with many columns for different stats.
* **Populated by:** `scripts/sync_fixture_stats.py`
* **Schema:**
    ```sql
    CREATE TABLE IF NOT EXISTS fixture_stats (
        id INTEGER PRIMARY KEY AUTOINCREMENT,   -- Internal DB ID
        fixture_id INTEGER NOT NULL,            -- Links to schedules.fixture_id
        team_id INTEGER NOT NULL,               -- participant_id from API stat item
        period TEXT NOT NULL,                   -- e.g., 'first_half', 'second_half' (Mapped from period description)

        -- Statistic columns (using underscore convention)
        goals INTEGER DEFAULT 0,
        shots_on_target INTEGER DEFAULT 0,
        shots_off_target INTEGER DEFAULT 0,
        ball_possession REAL DEFAULT NULL,
        corners INTEGER DEFAULT 0,
        fouls INTEGER DEFAULT 0,
        yellow_cards INTEGER DEFAULT 0,
        red_cards INTEGER DEFAULT 0,
        shots_total INTEGER DEFAULT 0,
        shots_blocked INTEGER DEFAULT 0,
        offsides INTEGER DEFAULT 0,
        saves INTEGER DEFAULT 0,
        hit_woodwork INTEGER DEFAULT 0,
        shots_insidebox INTEGER DEFAULT 0,
        successful_dribbles INTEGER DEFAULT 0,
        successful_dribbles_percentage REAL DEFAULT NULL,
        successful_passes INTEGER DEFAULT 0,
        successful_passes_percentage REAL DEFAULT NULL,
        shots_outsidebox INTEGER DEFAULT 0,
        dribble_attempts INTEGER DEFAULT 0,
        throwins INTEGER DEFAULT 0,
        assists INTEGER DEFAULT 0,
        accurate_crosses INTEGER DEFAULT 0,
        total_crosses INTEGER DEFAULT 0,
        penalties INTEGER DEFAULT 0,
        passes INTEGER DEFAULT 0,
        attacks INTEGER DEFAULT 0,
        challenges INTEGER DEFAULT 0,
        tackles INTEGER DEFAULT 0,
        interceptions INTEGER DEFAULT 0,
        long_passes INTEGER DEFAULT 0,
        goal_kicks INTEGER DEFAULT 0,
        key_passes INTEGER DEFAULT 0,
        dangerous_attacks INTEGER DEFAULT 0,
        substitutions INTEGER DEFAULT 0,

        -- Timestamps
        timestamp DATETIME,                     -- Timestamp when the stat was fetched/processed
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

        -- Constraints
        UNIQUE (fixture_id, team_id, period),    -- Prevent duplicate stat entries for the same team/period
        FOREIGN KEY (fixture_id) REFERENCES schedules(fixture_id) -- Link to schedules table
    );
    ```

**6. `fixture_odds` Table (Planned - Not Yet Implemented)**

* **Purpose:** Stores pre-match and in-play betting odds from various bookmakers for fixtures.
* **Populated by:** Future `scripts/sync_odds.py` (requires implementation)
* **Schema (Planned):**
    ```sql
    CREATE TABLE IF NOT EXISTS fixture_odds (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        fixture_id INTEGER NOT NULL,            -- Links to schedules.fixture_id
        bookmaker_id INTEGER,
        bookmaker_name TEXT,
        market_type TEXT NOT NULL,              -- e.g., '1x2', 'over_under', 'asian_handicap'
        timestamp DATETIME NOT NULL,            -- Timestamp of the odds snapshot
        stage TEXT NOT NULL,                    -- 'pre_match' or 'in_play'
        -- Common Market Odds (add more as needed)
        home_odds REAL,
        draw_odds REAL,
        away_odds REAL,
        over_under_value REAL,                  -- e.g., 2.5 for O/U 2.5 goals
        over_odds REAL,
        under_odds REAL,
        -- Add columns for other markets (Handicap, Correct Score, etc.) if required
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        -- updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Trigger can be added later
        FOREIGN KEY (fixture_id) REFERENCES schedules(fixture_id)
    );
    ```

**7. `fixture_timeline` Table (Planned - Revised for Pressure Index)**

* **Purpose:** Stores minute-by-minute timeline data, including events and pressure indices if available from the API. [cite: 40]
* **Populated by:** Future `scripts/sync_events.py` and `scripts/sync_pressure.py` (requires implementation). [cite: 41]
* **Schema (Planned - Revised):**
    ```sql
    CREATE TABLE IF NOT EXISTS fixture_timeline (
        timeline_id INTEGER PRIMARY KEY AUTOINCREMENT, -- Renamed primary key
        fixture_id INTEGER NOT NULL,            -- Links to schedules.fixture_id [cite: 41]
        minute INTEGER NOT NULL,                -- Minute of the event/data point [cite: 41]
        participant_id INTEGER,                 -- Added: Participant ID for pressure/event [cite: 42, 43]
        pressure_index REAL,                    -- Added: Pressure index value [cite: 44, 45]
        event_type TEXT,                        -- e.g., 'goal', 'card', 'substitution', 'ball_position', 'pressure' [cite: 42]
        -- Other potential fields from original plan (can be added later)
        -- second INTEGER,                      -- Optional: Second within the minute [cite: 42]
        -- team_id INTEGER,                     -- Redundant if participant_id is used
        -- player_id INTEGER,                   -- Player associated with the event (if applicable) [cite: 43]
        -- ball_x REAL,                         -- Ball x coordinate [cite: 43, 44]
        -- ball_y REAL,                         -- Ball y coordinate [cite: 44]
        -- event_details TEXT,                  -- JSON or Text description of the event [cite: 45]
        api_event_id INTEGER,                   -- Added: Original ID from API pressure/event item
        timestamp DATETIME,                     -- Timestamp of the event/data point (when it occurred in match, if available) [cite: 45]
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Trigger can be added later

        -- Constraint to prevent duplicate pressure entries for the same minute/participant
        UNIQUE (fixture_id, minute, participant_id, event_type), -- Added UNIQUE constraint

        FOREIGN KEY (fixture_id) REFERENCES schedules(fixture_id) [cite: 46]
        -- Optional: FOREIGN KEY (participant_id) REFERENCES teams(team_id) -- If participant_id always refers to a team
    );
    ```
## Schema Usage for Prediction Modelling

With the implemented schema, you can gather features for prediction models:

**Example: Gathering Pre-match and Post-match Data**

```sql
-- Select basic fixture info and team stats for finished matches
SELECT
    s.fixture_id,
    s.season_id,
    s.league_id,
    s.start_time,
    s.home_team_id,
    s.away_team_id,
    s.home_score,
    s.away_score,
    s.result,
    -- Home Team Stats (Full Match)
    fs_home.goals AS home_goals_full,
    fs_home.shots_total AS home_shots_full,
    fs_home.shots_on_target AS home_sot_full,
    fs_home.ball_possession AS home_possession_full,
    fs_home.corners AS home_corners_full,
    fs_home.fouls AS home_fouls_full,
    -- Away Team Stats (Full Match)
    fs_away.goals AS away_goals_full,
    fs_away.shots_total AS away_shots_full,
    fs_away.shots_on_target AS away_sot_full,
    fs_away.ball_possession AS away_possession_full,
    fs_away.corners AS away_corners_full,
    fs_away.fouls AS away_fouls_full
    -- Add more stats as needed...
FROM
    schedules s
LEFT JOIN
    fixture_stats fs_home ON s.fixture_id = fs_home.fixture_id
                         AND s.home_team_id = fs_home.team_id
                         AND fs_home.period = 'second_half' -- Assuming 'second_half' contains full match stats
LEFT JOIN
    fixture_stats fs_away ON s.fixture_id = fs_away.fixture_id
                         AND s.away_team_id = fs_away.team_id
                         AND fs_away.period = 'second_half' -- Assuming 'second_half' contains full match stats
WHERE
    s.status = 'FT'; -- Or other finished statuses like 'AET', 'FT_PEN'

Note: The fixture_stats table might contain stats for different periods (first_half, second_half, potentially extra_time). 
You need to select the appropriate period based on whether you need half-time or full-time stats. 
Verify if SportMonks provides cumulative stats in the 'second_half' period or if aggregation is needed. 
Once fixture_odds is implemented, it can be joined to get pre-match odds features.Data Storage StrategySchema Definition: Defined directly in create_<resource>_table functions within src/data/storage.py.
Data Insertion:store_data function (generic): Uses INSERT OR REPLACE based on the primary key. Suitable for leagues, seasons, teams, schedules.store_fixture_stats_long function: 
Uses INSERT OR IGNORE due to the UNIQUE (fixture_id, team_id, period) constraint for fixture_stats.